plugins {
	id 'com.android.library'
	id 'org.jetbrains.kotlin.multiplatform'
    id 'maven-publish'
}

group = 'com.synappticlabs.pistachio'
version = '0.1.0'

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "$pistachio_version"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        project.archivesBaseName = "pistachio"
        project.version = android.defaultConfig.versionName
    }
    buildTypes {
        debug {}
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            if (outputFile != null && outputFileName.endsWith('.aar')) {
                outputFileName = "${archivesBaseName}-${variant.buildType.name}-${version}.aar"
            }
        }
    }
}

dependencies {
    // Specify Kotlin/JVM stdlib dependency.
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7'
//    implementation "androidx.appcompat:appcompat:$androidx_version"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'org.jetbrains.kotlin:kotlin-test'
    androidTestImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espresso_version"
}

kotlin {
    targets {
        fromPreset(presets.android, 'android') {
            mavenPublication {
            }
        }

        def buildForDevice = project.findProperty("device")?.toBoolean() ?: false
        def iosPreset = (buildForDevice) ? presets.iosArm64 : presets.iosX64
        fromPreset(iosPreset, 'ios') {
            compilations.main.outputKinds('FRAMEWORK')
        }

        fromPreset(presets.jvm, 'jvm')
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
        androidMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            }
        }
    }
}

task copyFramework {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
    dependsOn "link${buildType.toLowerCase().capitalize()}FrameworkIos"

    doLast {
        def srcFile = kotlin.targets.ios.compilations.main.getBinary("FRAMEWORK", buildType)
        def targetDir = getProperty("configuration.build.dir")
        copy {
            from srcFile.parent
            into targetDir
            include 'pistachio.framework/**'
            include 'pistachio.framework.dSYM'
        }
    }
}

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn 'linkTestDebugExecutableIos'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.compilations.test.getBinary('EXECUTABLE', 'DEBUG')
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}

project.ext.pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "Samus"
            name "Sam Corder"
        }
    }

    scm {
        url "https://github.com/samus/pistachio"
    }
}
apply plugin: 'digital.wup.android-maven-publish'

publishing {
    publications {
        mavenProject(MavenPublication) {
        }

    }
}

afterEvaluate {
    project.publishing.publications {
        defaultAar(MavenPublication) {
            artifact("$buildDir/outputs/aar/pistachio-release-${version}.aar")
            artifactId = project.name + "-" + kotlin.targets.android.name.toLowerCase()
            //println("Maven aar ${artifactId}")
            from components.android
            artifacts.removeAll(artifacts.matching { !it.file.name.endsWith('aar') })
        }
    }
    project.publishing.publications.forEach { publication ->
        //println("pub.groupId ${publication.groupId}, artifactId ${publication.artifactId}, publication ${publication}")
        publication.pom.withXml {
            def root = asNode()
            root.appendNode('name', "pistachio")
            root.appendNode('description', 'Unidirectional data flow for apps.')
            root.appendNode('url', 'https://github.com/samus/pistachio')
            root.children().last() + pomConfig
        }
    }
}

apply plugin: 'com.jfrog.bintray'

bintray {
    def keyProps = new Properties()
    def keyFile = file("../keys.properties")
    keyFile.withInputStream { keyProps.load(it) }

    user = keyProps.getProperty("bintrayUser")
    key = keyProps.getProperty("bintrayKey")
    publications = ['mavenProject']
    publish = false
    override = true
    pkg {
        repo = 'pistachio'
        name = 'pistachio'
        userOrg = 'samus'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/samus/pistachio'
        version {
            name = project.version
        }
    }
}

bintrayUpload.doFirst {
    publications = project.publishing.publications
}